# Copyright (c) 2016 Shotgun Software Inc.
#
# CONFIDENTIAL AND PROPRIETARY
#
# This work is provided "AS IS" and subject to the Shotgun Pipeline Toolkit
# Source Code License included in this distribution package. See LICENSE.
# By accessing, using, copying or modifying this work you indicate your
# agreement to the Shotgun Pipeline Toolkit Source Code License. All rights
# not expressly granted therein are reserved by Shotgun Software Inc.

import os
import subprocess

from ..log import LogManager

from ..errors import TankError
from .process import subprocess_check_output, SubprocessCalledProcessError

log = LogManager.get_logger(__name__)

class TankGitError(TankError):
    """
    Errors related to git communication
    """
    pass

@LogManager.log_timing
def execute_git_command(cmd):
    """
    Wrapper around git execution. Executes a git command and returns its output.

    First probes to check if the git executable exists. Next
    executes the given command.

    Git operates in the context of the current working directory,
    so this method is typically used in the following way::

        cwd = os.getcwd()
        try:
            # do something
            execute_git_command("checkout %s -q" % self._branch)
        finally:
            os.chdir(cwd)

    .. warning:: This method will not handle https repositories that use
                 credentials. If no external authentication method
                 has been defined, the method will fail with an error message,
                 typically saying ``Cannot read Username for https://sitename``.
                 In order to use such repositories with toolkit, we strongly
                 recommend using ssh urls. If this is not an option, you need to
                 specify an external authentication mechanism, for example::

                    git config --system core.askpass git-gui--askpass

                 For more information, see https://git-scm.com/docs/gitcredentials.

    :raises: Will raise a TankGitError on failure
    :param cmd: git command to execute (e.g. 'clone foo.git')
    :returns: the output generated by the command
    """
    log.debug("Attempting to execute git command '%s'" % cmd)
    # first probe to check that git exists in our PATH
    log.debug("Checking that git exists and can be executed...")
    try:
        _ = subprocess_check_output("git --version", shell=True)
    except:
        raise TankGitError(
            "Cannot execute the 'git' command. Please make sure that git is "
            "installed on your system and that the git executable has been added to the PATH."
        )

    log.debug("...success! Now executing command...")
    command = "git %s" % cmd
    
    try:
        output = subprocess_check_output(command, stderr=subprocess.STDOUT, shell=True)
    except SubprocessCalledProcessError, e:
        raise TankGitError(
            "Error executing git operation '%s': %s (Return code %s)" % (command, e.output, e.returncode)
        )
    log.debug("...success!")

    return output


