.. _authentication:

.. currentmodule:: sgtk.authentication

Authentication
########################################

Introduction
----------------------------------------

When you run the Shotgun pipeline Toolkit, it will connect to Shotgun on a regular basis in order to carry out
certain operations. For example, you publish a new render or you browse for an item that you want to load into
your scene. In order to do that, Toolkit will need to log in to Shotgun, either to read or write data, which means that it will
need to make sure the current user is authenticated so that a connection with the Shotgun server can be established.

.. note:: The Toolkit authentication API does not require an installed or
    bootstrapped instance of the Toolkit Core platform. You can use it
    simply by importing ``sgtk`` and calling its methods.

Toolkit uses session tokens for authentication. These are unique identifiers which are generated by the Shotgun server.
Whenever a Shotgun API request comes in from Toolkit, this session token is passed along so that the server can
validate it and grant access to the request. These session tokens time out after a certain period of inactivity,
usually 24 hours, and whenever this happens, the user is typically prompted to enter their password again in order
for Toolkit to retrieve a new session token.

This ``sgtk.authentication`` API handles the notion of the current user and wraps around the Shotgun API to ensure that
if a session times out, the user is prompted to re-enter their credentials. The API and process for
authentication can be summarized as follows:

- A :class:`ShotgunAuthenticator` class is used to handle the actual authentication process. This can be called
  in various ways and also wraps around storing authenticated sessions so that the user doesn't have to keep
  typing their password in.
- After a successful authentication operation, the :class:`ShotgunAuthenticator` returns a :class:`ShotgunUser` object.
  This object represents the user and can be used to generate a Shotgun API instance which belongs to the user. The
  generated API instance is subclassed from the normal Shotgun API and gracefully traps when the user credentials are
  no longer valid (which usually happens after a certain period of inactivity). In this case it will automatically
  present the user with a password prompt.
- :class:`ShotgunUser` objects can be serialized via the :meth:`serialize_user` and :meth:`deserialize_user` methods
  and can be passed between multiple sessions, say for example when a DCC is launched or when a job
  is sent to the render farm.
- Toolkit core does not have a built-in notion of the current user so this needs to be explicitly set via the
  :meth:`sgtk.set_authenticated_user` method. If you are using the Bootstrap process to start up Toolkit, you
  pass a :class:`ShotgunUser` directly to the :class:`~sgtk.bootstrap.ToolkitManager` constructor.
- If you want to control how the :class:`ShotgunAuthenticator` creates a user object and caches session data
  inbetween invocations, you can subclass the :class:`DefaultsManager`.

Normally, the tk session is created automatically as part of the DCC launch process, ``tank`` command or Shotgun
Desktop, so there is little to worry about. There are some use cases where controlling the authentication directly
may be useful:

- If you are dispatching jobs to the render farm, you can serialize and deserialize the user object from the
  dispatching DCC. Use the :meth:`sgtk.get_authenticated_user` to extract the user object from your current
  session and :meth:`sgtk.set_authenticated_user` to set it on your remote session.

- If you want to use an explicit script user, use :meth:`ShotgunAuthenticator.create_script_user` to create
  a :class:`ShotgunUser` object representing a script. This may look like this::

    import sgtk

    # create an authenticator object. This is the main object which
    # handles all authentication
    sa = sgtk.authentication.ShotgunAuthenticator()

    # Use the authenticator to create a user object. This object
    # identifies a Shotgun user or script and also wraps around
    # a Shotgun API instance which is associated with that user.
    user = sa.create_script_user(api_script="myscript",
                                 api_key="xxxxx",
                                 host="https://myhost.shotgunstudio.com")

    # tell the Toolkit Core API which user to use
    sgtk.set_authenticated_user(user)


- If you want to use a standard UI to prompt a user for a host, username and password.


API Reference
----------------------------------------


ShotgunAuthenticator
==================================
.. autoclass:: ShotgunAuthenticator
    :members:
    :inherited-members:

ShotgunUser
==================================

.. autoclass:: ShotgunUser
    :members:
    :exclude-members: impl
    :inherited-members:

DefaultsManager
==================================

.. autoclass:: DefaultsManager
    :members:
    :inherited-members:

Utilities
==================================

.. autofunction:: deserialize_user
.. autofunction:: serialize_user

Exception Classes
==================================

.. autoclass:: ShotgunAuthenticationError
    :show-inheritance:
    :inherited-members:
    :members:

.. autoclass:: AuthenticationError
    :show-inheritance:
    :inherited-members:
    :members:

.. autoclass:: IncompleteCredentials
    :show-inheritance:
    :inherited-members:
    :members:

.. autoclass:: AuthenticationCancelled
    :show-inheritance:
    :inherited-members:
    :members:

